diff --git a/osm/linux/osm_linux.c b/osm/linux/osm_linux.c
index 6ad8579..c304af9 100644
--- a/osm/linux/osm_linux.c
+++ b/osm/linux/osm_linux.c
@@ -265,7 +265,6 @@ static void ldm_initialize_vbus_done(void *osext)
 	up(&((PVBUS_EXT)osext)->sem);
 }
 
-
 static int hpt_detect (Scsi_Host_Template *tpnt)
 {
 	struct pci_dev *pcidev;
@@ -360,7 +359,11 @@ static int hpt_detect (Scsi_Host_Template *tpnt)
 	/* register scsi hosts */
 	ldm_for_each_vbus(vbus, vbus_ext) {
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 17, 0))
 		host = scsi_register(tpnt, sizeof(void *));
+#else
+		host = scsi_register_legacy(tpnt, sizeof(void *));
+#endif
 		if (!host) {
 			os_printk("scsi_register failed");
 			continue;
@@ -1654,7 +1657,11 @@ static int hpt_release (struct Scsi_Host *host)
 	if (!ldm_get_next_vbus(0, 0))
 		unregister_reboot_notifier(&hpt_notifier);
 
-	scsi_unregister(host);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 17, 0))
+  scsi_unregister(host);
+#else
+	scsi_unregister_legacy(host);
+#endif
 	return 0;
 }
 
@@ -2153,13 +2160,80 @@ static int hpt_scsi_ioctl(Scsi_Device * dev, int cmd, void *arg)
 	return -EINVAL;
 }
 
+/*
+ * scsi_host_template legacy wrapper
+ */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+struct scsi_host_template_legacy {
+  struct scsi_host_template rr_driver;
+
+  /*
+   * Legacy list of hosts per template
+   *
+   * This was removed, but we've readded it for simplicity of porting
+   * This is managed by module_init/module_exit.
+   *
+   */
+  struct list_head legacy_hosts;
+};
+
+/*  "struct module *module; must be the first member of struct scsi_host_template_legacy" */
+RR_STATIC_ASSERT(check1, offsetof(struct scsi_host_template_legacy, rr_driver.module) == 0);
+
+/*  "randomly chosen field int this_id; must be at the same offset as in struct scsi_host_template" */
+RR_STATIC_ASSERT(check2, offsetof(struct scsi_host_template_legacy, rr_driver.this_id) == offsetof(struct scsi_host_template, this_id));
+
+/*  "struct module *module; must be the first member of struct scsi_host_template_legacy" */
+RR_STATIC_ASSERT(check3, offsetof(struct scsi_host_template_legacy, legacy_hosts) == sizeof(struct scsi_host_template));
+
+#define Scsi_Host_Template struct scsi_host_template_legacy
+
+/*MiSt: in this extension to ‘struct Scsi_Host’, we just store ‘sht_legacy_list’
+        as private data in the structures ‘hostdata’ member: */
+struct Scsi_Host_Legacy {
+	struct Scsi_Host scsi_host;
+
+	/* host = scsi_register(tpnt, sizeof(void *));
+	 *
+	 * See osm/linux/osm_linux.h:
+	 * #define get_vbus_ext(host) (*(PVBUS_EXT *)host->hostdata)
+	 */
+	PVBUS_EXT vbus_ext;
+
+	/*
+	 * List of hosts per template.
+	 *
+	 * This is only for use by scsi_module.c for legacy templates.
+	 * For these access to it is synchronized implicitly by
+	 * module_init/module_exit.
+	 */
+	struct list_head sht_legacy_list;
+};
+
+/* "struct list_head __devices; must be the first member of struct Scsi_Host_Legacy" */
+RR_STATIC_ASSERT(check4, offsetof(struct Scsi_Host_Legacy, scsi_host.__devices) == 0);
+
+/* "void *vbus_ext; must be the first private data member of Scsi_Host.hostdata" */
+RR_STATIC_ASSERT(check5, offsetof(struct Scsi_Host_Legacy, vbus_ext) == offsetof(struct Scsi_Host, hostdata));
+
+/* "struct list_head sht_legacy_list; must be the second private data member of Scsi_Host.hostdata" */
+RR_STATIC_ASSERT(check6, offsetof(struct Scsi_Host_Legacy, sht_legacy_list) == (offsetof(struct Scsi_Host, hostdata) + sizeof(VBUS_EXT *)));
+
+#define get_legacy_vbus_ext(host) (*(PVBUS_EXT *)host->scsi_host.hostdata)
+#endif
+
 /*
  * Host template
  */
 static Scsi_Host_Template driver_template = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+  .rr_driver = {
+#endif
 	name:                    driver_name,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	detect:                  hpt_detect,
 	release:                 hpt_release,
+#endif
 	queuecommand:            hpt_queuecommand,
 	eh_device_reset_handler: hpt_reset,
 	eh_bus_reset_handler:    hpt_reset,
@@ -2192,6 +2266,11 @@ static Scsi_Host_Template driver_template = {
 	max_sectors:             128,
 #endif
 	this_id:                 -1
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+  },
+
+  .legacy_hosts = NULL
+#endif
 };
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)
@@ -2201,14 +2280,32 @@ EXPORT_NO_SYMBOLS;
 
 #else 
 
+struct Scsi_Host *scsi_register_legacy(void *scsi_host_template, int privsize)
+{
+  Scsi_Host_Template *sht = (Scsi_Host_Template *)scsi_host_template;
+
+  struct Scsi_Host_Legacy *shost = (struct Scsi_Host_Legacy *)scsi_host_alloc(
+      (struct scsi_host_template *)sht, privsize + sizeof(struct list_head));
+
+  if (shost)
+    list_add_tail(&shost->sht_legacy_list, &sht->legacy_hosts);
+  return (struct Scsi_Host *)shost;
+}
+
 /* scsi_module.c is deprecated in kernel 2.6 */
 static int __init init_this_scsi_driver(void)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	struct scsi_host_template *sht = &driver_template;
 	struct Scsi_Host *shost;
+#else
+	Scsi_Host_Template *sht = (Scsi_Host_Template *)&driver_template;
+	struct Scsi_Host_Legacy *shost;
+#endif
 	struct list_head *l;
 	int error;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	if (!sht->release) {
 		printk(KERN_ERR
 			"scsi HBA driver %s didn't set a release method.\n",
@@ -2217,44 +2314,92 @@ static int __init init_this_scsi_driver(void)
 	}
 
 	sht->module = THIS_MODULE;
+#else
+	sht->rr_driver.module = THIS_MODULE;
+#endif
 	INIT_LIST_HEAD(&sht->legacy_hosts);
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	sht->detect(sht);
+#else
+	hpt_detect((struct scsi_host_template *)sht);
+#endif
 	if (list_empty(&sht->legacy_hosts))
 		return -ENODEV;
 
 	list_for_each_entry(shost, &sht->legacy_hosts, sht_legacy_list) {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 		error = scsi_add_host(shost, &get_vbus_ext(shost)->hba_list->pcidev->dev);
+#else
+		error = scsi_add_host((struct Scsi_Host *)shost, &get_legacy_vbus_ext(shost)->hba_list->pcidev->dev);
+#endif
 		if (error)
 			goto fail;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 		scsi_scan_host(shost);
+#else
+		scsi_scan_host((struct Scsi_Host *)shost);
+#endif
 	}
 	return 0;
  fail:
 	l = &shost->sht_legacy_list;
 	while ((l = l->prev) != &sht->legacy_hosts)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 		scsi_remove_host(list_entry(l, struct Scsi_Host, sht_legacy_list));
+#else
+		scsi_remove_host((struct Scsi_Host *)list_entry(l, struct Scsi_Host_Legacy, sht_legacy_list));
+#endif
 	return error;
 }
 
+void scsi_unregister_legacy(void *scsi_host)
+{
+  struct Scsi_Host_Legacy *shost = (struct Scsi_Host_Legacy *)scsi_host;
+
+  list_del(&shost->sht_legacy_list);
+  scsi_host_put((struct Scsi_Host *)shost);
+}
+
 static void __exit exit_this_scsi_driver(void)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	struct scsi_host_template *sht = &driver_template;
 	struct Scsi_Host *shost, *s;
+#else
+	Scsi_Host_Template *sht = (Scsi_Host_Template *)&driver_template;
+	struct Scsi_Host_Legacy *shost, *s;
+#endif
 
 	list_for_each_entry(shost, &sht->legacy_hosts, sht_legacy_list)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 		scsi_remove_host(shost);
+#else
+		scsi_remove_host((struct Scsi_Host *)shost);
+#endif
 	list_for_each_entry_safe(shost, s, &sht->legacy_hosts, sht_legacy_list)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 		sht->release(shost);
+#else
+		hpt_release((struct Scsi_Host *)shost);
+#endif
 
 	if (list_empty(&sht->legacy_hosts))
 		return;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 	printk(KERN_WARNING "%s did not call scsi_unregister\n", sht->name);
+#else
+	printk(KERN_WARNING "%s did not call scsi_unregister\n", sht->rr_driver.name);
+#endif
 	dump_stack();
 
 	list_for_each_entry_safe(shost, s, &sht->legacy_hosts, sht_legacy_list)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,17,0)
 		scsi_unregister(shost);
+#else
+		scsi_unregister_legacy(shost);
+#endif
 }
 
 module_init(init_this_scsi_driver);
diff --git a/osm/linux/osm_linux.h b/osm/linux/osm_linux.h
index 0f6ec10..99fe070 100644
--- a/osm/linux/osm_linux.h
+++ b/osm/linux/osm_linux.h
@@ -8,6 +8,15 @@
 
 #include <linux/version.h>
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+/* 
+ *  Maps legacy structures and normal functions
+ */
+#define RR_STATIC_ASSERT(n, c)                     \
+  enum { RR_static_##n = 1 / (int)(!!(c)) }; \
+
+#endif
+
 /* system headers */
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,38)
@@ -75,6 +84,11 @@ typedef struct scsi_pointer Scsi_Pointer;
 #include <scsi/scsi_host.h>
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+struct Scsi_Host *scsi_register_legacy(void *scsi_host_template, int privsize);
+void scsi_unregister_legacy(void *scsi_host);
+#endif
+
 #pragma pack(1)
 typedef struct _INQUIRYDATA {
 #ifdef __BIG_ENDIAN_BITFIELD
